//java -jar ASL.jar -s C:\Arxiv\ASL_Interpreter\src 
//1	Переменные 
//1.1	Тип, значение
defun tvalue($value, $type) {
  	conz(
		tvalue, concept,
   		value, $value,
		type, $type 
	);
}

//1.2	Доступ к переменной
defun variableAccess($variable) {
	conz(
		variableAccess, concept,
		variable, $variable
	);	
}

//1.3	Присваивание переменной
defun variableAssignment($variable, $expression) {
	conz(
		variableAssignment, concept,
	    variable, $variable,
	    expression, $expression
	);
}

//1.4	Объявление переменной
defun variableDeclaration($variable, $type, $initializer...) {
	conz(
		variableDeclaration, concept,
		variable, $variable,
		type, $type,
		initializer, $initializer[1]
	);	
}

//2	Операции
//2.1	Общий конструктор для операций
defun op($operation, $arguments...) {
	conz(
		op, concept,
		operation, $operation,
		arguments, $arguments  
	);
}

//2.2	Арифметические операции
//2.2.1	Сложение
//разрешается складывать только int с int и double с double
//op("+", $arg1, $arg2)
//2.2.2	Вычитание
//op("-", $arg1, $arg2)
//2.2.3	Унарный минус
//op("-", $arg1)
//2.2.4	Умножение
//op("*", $arg1, $arg2)
//2.2.5	Деление
//op("/", $arg1, $arg2)
//2.3	Операции со строками
//2.3.1	Конкатенация строк
//op("conc", $arg1, $arg2)

//3	Операторы
//3.1	expressionStatement
defun expSt($expression){
	conz(
		expressionStatement, concept, 
		expression, $expression
	);	
}

//3.2	commaExpression
defun commaExpression($expressions...){
	conz(
		commaExpression, concept,
		expressionSequence, $expressions
	);
}

//3.3	Оператор блока
defun blockStatement($statements...) {
	conz(
		blockStatement, concept,
		statementSequence, $statements
	);	
}

//3.4	Условный if
defun ifStatement($condition, $thenBranch, $elseBranch... ) {
	conz(
		ifStatement, concept,
		condition, $condition,
		thenBranch, $thenBranch,
		elseBranch, $elseBranch[1]
	);	
}

//3.5	 Оператор switchStatement
//3.5.1	caseStatement
defun caseStatement($label){
	conz(
		caseStatement, concept,
		label, $label
	);
}

//3.5.2	defaultStatement 
defun defaultStatement() {
	conz(defaultStatement, concept);
}

//3.5.3	switchStatement
defun switchStatement($expression, $block) {
	conz(
		switchStatement, concept,
		controlExpression, $expression,
		block, $block
	);
}

//3.6	Операторы передачи управления
//3.6.1	break
defun breakStatement() {
	conz(
		breakStatement, concept
	);
}


//3.6.2	continue
defun continueStatement() {
	conz(
		continueStatement, concept
	);
}

//3.7	Операторы цикла
//3.7.1	Оператор for без инициализации
defun forStatementWithoutInitializer($condition, $iterator, $body) {
	conz(
		forStatementWithoutInitializer, concept,
		condition, $condition, 
		iterator, $iterator, 
		body, $body
	);
}

//3.7.2	Оператор for
defun forStatement($initializer, $condition, $iterator, $body) {
	conz(
		forStatement, concept,
		initializer, $initializer, 
		condition, $condition, 
		iterator, $iterator, 
		body, $body
	);
}

//3.7.3	Оператор while
defun whileStatement($condition, $body) {
	conz(
		whileStatement, concept,
		condition, $condition, 
		body, $body
	);	
}

//3.7.4	Оператор doWhile
defun doWhileStatement($condition, $body) {
	conz(
		doWhileStatement, concept, 
		condition, $condition, 
		body, $body
	);	
}

//4	Перечисление
//4.1	Конструктор
defun enumType($name,$consts...) {
  	$enum = conz(
		enum, concept,
		name, $name,
		value, conz()
	);
 	$i = 1;
  	while(isDef($consts[i])) {
   		$enum.value.($consts[i]) = $i;
		@enumState.($consts[i]) = $i;
		@enumType.($consts[i]) = $name;
    	$i = $i + 1;
  	};
  	$enum;
}

//4.2	доступ к значению
defun enumAccess($enum, $const){
	conz(
		enumAccess, concept,
		enum, $enum,
		const, $const
	);	
}

//5	Указатель 
//5.1	конструктор для указательного типа
defun pointerType($type){
	if(isType($type))
	then
		conz(
			pointerType, concept,
			type, $type
		);
	else jump(execute:pointerType:Error, $pointerType);
}

//5.2	конструктор для создания указателя
defun newPointer($type){
	if (isType($type))
	then conz(newPointer, concept, type, $type);
	else jump(execute:pointerType:Error, $pointerType);
}

//5.3	конструктор для доступа к значению по указателю
defun pointerAccess($newPointer) {
	conz(
		pointerAccess, concept,
		newPointer, $pointer
	);
}

//5.4	конструктор для изменения значения по указателю
defun pointerAssignment($newPointer, $value){
	conz(	
		pointerAssignment, concept,
		newPointer, $newPointer,
		value, $value
	);
}

//6	Составные типы данных
//6.1	Массив
//6.1.1	конструктор для типа массива
defun arrayType($type) {
	if (isType($type))
	then conz(arrayType, concept, type, $type);
	else jump(execute:arrayType:Error, $type);
}

//6.1.2	конструктор для массива как значения
defun newArray($type, $length) {
 	if (isType($type))
	then conz(newArray, concept, length, $length, type, $type);
	else jump(newArray:Error,seqOne($type, $length));
}

//6.1.3	конструктор для доступа к элементу массива
defun elementArrayAccess($array, $index){
	conz(
		elementArrayAccess, concept,
		array, $array,
		index, $index
	);	
}

//6.1.4	конструктор для присваивания значения элементу массива
defun elementArrayAssignment($array, $index, $value){
	conz(
		elementArrayAssignment, concept,
		array, $array,
		index, $index,
		value, $value
	);
}

//6.2	Структура
//6.2.1	конструктор для типа структуры
defun structType($name, $fields...){
	$structType = conz(
		structType, concept,
		value, conz()
	);
  	$i = 1;
  	while(isDef($fields[i])) {
		if(isDef($fields[i+1])) then $structType.value[$fields[i]] = $fields[i+1];
    	$i = $i + 2;
  	}
}

//6.2.2	конструктор для структуры как значения
defun newStruct($structType) {
	conz(
		newStruct, concept, 
		structType, $structType
	);
}

//6.2.3	конструктор для доступа к полю структуры
defun fieldStructAccess($struct, $field){
	conz(
		fieldStructAccess, concept,
		struct, $struct,
		field, $field
	);	
}

//6.2.4	конструктор для присваивания значения полю структуры
defun fieldStructAssignment($struct, $field, $value) {
	conz(
		fieldStructAssignment, concept,
		struct, $struct,
		field, $field,
		value, $value
	);
}

//7	Оператор forEach
defun forEachStatement($variable, $array, $body) {
	conz(
		forEachStatement, concept,
		variable, $variable,
		array, $array, 
		body, $body
	);
}

//8	Функция
//8.1	конструктор для определения функции
defun funDeclaration($returnType,$name,$typeArguments,$body,$redefined...) {
	$funDeclaration = conz(
		funDeclaration, concept,
		returnType, $returnType,
		name, $name,
        arguments, seqOne(),
		argType, conz(),		
		body, $body,		
		redefined, $redefined[1]
	);
	$i = 1;
	//$typeArguments последовательность пар имя аргумента и его тип
	while(isDef($typeArguments[$i])) {
	    if(!isType($typeArguments[$i+1]))
		then jump(execute:funDeclaration:Error, $funDeclaration);
		seqAppend($funDeclaration.arguments, $typeArguments[$i]);
		$funDeclaration.argType.($typeArguments[$i]) = $typeArguments[$i+1];
		$i = $i + 2;
	};
	$funDeclaration;
}

//8.2	конструктор для вызова функции
//$arguments - последовательность tvalue (типозначение) аргументов
defun funCall($name, $arguments...){
	$funDeclaration = @functions[$name];
	//проверим, что функция определена
	$funCall  = conz(
		funCall, concept,
		name, $name,
		arguments, $arguments
	);
}

defun returnStatement($expression) {
  conz(returnStatement, concept, expression, $expression);
}
